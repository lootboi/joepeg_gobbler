const ethers = require('ethers');
const fs = require('fs');
const launchpegABI = require('../abis/joepegs.json');
const chalk = require('chalk');
const rl = require('readline')
.createInterface({
    input: process.stdin,
    output: process.stdout
});

//Global variables
const storedWallets = require('../wallets/wallets.json'); //AutoGenerated file that stores wallet information
const provider = new ethers.providers.JsonRpcProvider('https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161'); //Create provider to connect to network

let wallets = []; //Generated wallets (including private keys)
let successfulWallets = [];
let signers = []; //Signers for each generated wallet
let signedContracts = []; //Instances of signed contracts
let mintedIDs = []; //Array to store tokenIDs of NFTs that are minted
let nftAddress = ''; //Address of contract
let nftPrice = ''; //Price for each NFT you wish to mint

 //-------------Script Functions-------------\\

//Create instance of NFT contract
async function createNFTContract() {
    for(let i = 0; i < wallets.length; i++) {
        //Create signers for each wallet
        const signer = new ethers.Wallet(wallets[i].privateKey, provider);
        signers.push(signer);

        //Create instance of NFT contract for each wallet
        const contract = new ethers.Contract(nftAddress, launchpegABI, signers[i]);
        signedContracts.push(contract);
    }
    console.log(chalk.green('Wallets have signed contracts!'));
}

//Generate x random wallets
function generateWallets(numWallets) {
    for (let i = 0; i < numWallets; i++) {
        wallets.push(ethers.Wallet.createRandom());
    }
    //Save wallets to .json file
    saveWallets();
    console.log(chalk.green('Wallets generated!'));
    for(let i = 0; i < wallets.length; i++) {
        console.log(chalk.blue('Wallet #' + (i + 1) + ': ' + wallets[i].address));
    }
}

//Save the wallets to a file in case autowithdrawal does not succeed (manually withdraw)
function saveWallets() {
    //Write wallets to file
    fs.writeFileSync('../wallets/wallets.json', JSON.stringify(wallets, null, "\t"));
    JSON.stringify({a:1,b:2,c:{d:1,e:[1,2]}}, null, "\t")
}

//Fund the wallets
async function fundWallets(amount) {
    for (let i = 0; i < wallets.length; i++) {
        await wallets[i].send(ethers.utils.parseEther(amount));
    }
}

//Mint Nft from specified contract
async function mintNFTs() {
    for (let i = 0; i < wallets.length; i++) {
        signedContracts[i].connect(wallets[i]).mint(
            wallets[i].address,
            1,
            {value: ethers.utils.parseEther(nftPrice)});
    }
    await fetchNFTs();
}

//Withdraw all NFTs into the admin wallet after finding tokenIDs
async function fetchNFTs() {
    //Get tokenIDs of NFTs
    for(let i = 0; i < wallets.length; i++) {
        findTokenID(wallets[i].address);
    }
    //Transfer NFTs to admin wallet
    for(let i = 0; i < successfulWallets.length; i++) {
        await signedContracts[i].connect(successfulWallets[i]).transfer(adminAddress, mintedIDs[i]);
    }
}

//Check if the NFT contract has entered the public minting phase (3)
async function checkMintState() {
    //Check if phase 3
    if(signedContracts[0].currentPhase != 3) {
        console.log(chalk.red('Public Mint has not started yet...'));
        await checkMintState(); //If not, check again
    //Phase 3, mint NFTs
    } else {
        console.log(chalk.green('Public Mint has started!'));
        await mintNFTs();
    }
}

//Find tokenID of ERC721 token after minting
async function findTokenID(walletAddress) {
    //Check if wallet has NFTs
    for(let i = 0; i < wallets.length; i++) {
        if(await signedContracts[i].balanceOf(wallets[i].address) == 0) {
            console.log(chalk.red('Wallet #' + i + ' has no NFTs'));
        } else {
            //Get tokenID of minted NFTs
            console.log(chalk.green('Wallet #' + i + ' has NFTs'));
            const nftBalance = await signedContracts[i].balanceOf(wallets[i].address);
            const nft = await signedContracts[i].tokenOfOwnerByIndex(wallets[i].address, nftBalance - 1);
            mintedIDs.push(nft); //Add tokenID to array
            successfulWallets.push(signers[i]); //Add wallets with successful mints to array
        }
    }
}

 //-------------Script to run when initiated-------------\\

async function main() {
    //Create wallets and save to file
    rl.question('How many wallets would you like to create?', (numWallets) => {
        generateWallets(numWallets);
        //Fund wallets from admin wallet
        rl.question('How much ether would you like to send to each wallet?', (amount) => {
            fundWallets(amount);
            //Set NFT contract address
            rl.question('What is the address of the NFT contract?', (address) => {
                nftAddress = address;
                //Set the mint price of the collection (in ether)
                rl.question('What is the price of each NFT?', (price) => {
                    nftPrice = price;
                    createNFTContract();
                    //Scan to see if the NFT contract has entered the public minting phase (3)
                    checkMintState();
                    //If phase 3, mint NFTs --> if not phase 3, scan again
                    //Check wallets to see if they have NFTs --> If they do, get tokenID
                    //Transfer NFTs to admin wallet
                });
            });
        });
    });
}
main();

